    const filtered = properties.filter((property) =>
      property.title.toLowerCase().includes(e.target.value.toLowerCase())
    );
    setFilteredProperties(filtered);
    setCurrentPage(1);
  };

  const handleSearchFormSubmit = (e) => {
    e.preventDefault();
    const filtered = properties.filter((property) =>
      property.title.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setFilteredProperties(filtered);
    setCurrentPage(1); // Reset to first page
  };

  const handleCategoryClick = (category) => {
    const filtered = properties.filter(
      (property) => property.categories.toLowerCase() === category.toLowerCase()
    );
    setFilteredProperties(filtered);
    setCurrentPage(1); // Reset to first page
  };

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleAdvancedSearchInputChange = (e) => {
    const { name, value } = e.target;
    setSearchParams((prevParams) => ({
      ...prevParams,
      [name]: value,
    }));
  };

  const handleAdvancedSearch = () => {
    const filtered = properties.filter((property) => {
      return Object.keys(searchParams).every((key) => {
        if (!searchParams[key]) return true;

        const propValue = property[key];
        if (propValue === undefined || propValue === null) return false;

        if (key === 'price') {
          return propValue === Number(searchParams[key]);
        }

        if (typeof propValue === "number") {
          return propValue === Number(searchParams[key]);
        }

        return String(propValue).toLowerCase().includes(searchParams[key].toLowerCase());
      });
    });
    setFilteredProperties(filtered);
    setCurrentPage(1); 
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentProperties = filteredProperties.slice(
    indexOfFirstItem,
    indexOfLastItem
  );

  // Calculate the total number of pages
  const totalPages = Math.ceil(filteredProperties.length / itemsPerPage);

